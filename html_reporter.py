import csv
import os

def generate_html_report(log_file_path, output_html_path="simulation_report.html"):
    """
    Generates an HTML report with a chart visualizing the simulation data.

    Args:
        log_file_path (str): Path to the CSV log file generated by the simulation.
        output_html_path (str): Path where the HTML report will be saved.
    """
    seconds = []
    healthy = []
    exposed = []
    infected = []
    recovered = []
    dead = []

    try:
        with open(log_file_path, 'r') as csvfile:
            reader = csv.reader(csvfile)
            header = next(reader) # Skip header row
            for row in reader:
                seconds.append(int(row[0]))
                healthy.append(int(row[1]))
                exposed.append(int(row[2]))
                infected.append(int(row[3]))
                recovered.append(int(row[4]))
                dead.append(int(row[5]))
    except FileNotFoundError:
        print(f"Error: Log file not found at {log_file_path}")
        return
    except Exception as e:
        print(f"Error reading CSV log file: {e}")
        return

    html_content = f"""
    <!DOCTYPE html>
    <html>
    <head>
        <title>Disease Simulation Report</title>
        <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
        <style>
            body {{ font-family: Arial, sans-serif; margin: 20px; }}
            h1 {{ text-align: center; }}
            .chart-container {{ width: 80%; margin: 0 auto; }}
        </style>
    </head>
    <body>
        <h1>Disease Simulation Overview</h1>
        <div class="chart-container">
            <canvas id="simulationChart"></canvas>
        </div>

        <script>
            const seconds = {seconds};
            const healthy = {healthy};
            const exposed = {exposed};
            const infected = {infected};
            const recovered = {recovered};
            const dead = {dead};

            const ctx = document.getElementById('simulationChart').getContext('2d');
            new Chart(ctx, {{
                type: 'line',
                data: {{
                    labels: seconds.map(s => `Day ${{Math.floor(s / (24*3600))}} ${{Math.floor((s % (24*3600)) / 3600)}}h`),
                    datasets: [
                        {{
                            label: 'Healthy',
                            data: healthy,
                            borderColor: 'rgb(75, 192, 192)',
                            tension: 0.1,
                            fill: false
                        }},
                        {{
                            label: 'Exposed',
                            data: exposed,
                            borderColor: 'rgb(255, 205, 86)',
                            tension: 0.1,
                            fill: false
                        }},
                        {{
                            label: 'Infected',
                            data: infected,
                            borderColor: 'rgb(255, 99, 132)',
                            tension: 0.1,
                            fill: false
                        }},
                        {{
                            label: 'Recovered',
                            data: recovered,
                            borderColor: 'rgb(54, 162, 235)',
                            tension: 0.1,
                            fill: false
                        }},
                        {{
                            label: 'Dead',
                            data: dead,
                            borderColor: 'rgb(0, 0, 0)',
                            tension: 0.1,
                            fill: false
                        }}
                    ]
                }},
                options: {{
                    responsive: true,
                    plugins: {{
                        title: {{
                            display: true,
                            text: 'Population State Over Time'
                        }}
                    }},
                    scales: {{
                        x: {{
                            title: {{
                                display: true,
                                text: 'Time (Seconds)'
                            }}
                        }},
                        y: {{
                            title: {{
                                display: true,
                                text: 'Population Count'
                            }},
                            beginAtZero: true
                        }}
                    }}
                }}
            }});
        </script>
    </body>
    </html>
    """

    try:
        with open(output_html_path, 'w') as f:
            f.write(html_content)
        print(f"HTML report generated successfully at {os.path.abspath(output_html_path)}")
    except Exception as e:
        print(f"Error writing HTML report: {e}")

if __name__ == "__main__":
    # Example usage (assuming simulation_log.csv exists)
    # You would run the main simulation first to generate the log
    # Then call this function
    # generate_html_report("simulation_log.csv", "my_simulation_report.html")
    print("This script is intended to be imported and used by main.py.")
    print("Run main.py to generate a simulation log and then an HTML report.")
